{"version":3,"file":"xuder.js","sources":["../src/combineReducers.js","../src/utils.js","../src/Store.js","../src/createStore.js","../src/applyMiddleware.js"],"sourcesContent":["export default function combineReducers (reducersMap) {\n  return function (rootState = {}, action) {\n    for (let key in reducersMap) {\n      let subReducer = reducersMap[key]\n      let subState = rootState[key]\n      rootState[key] = subReducer(subState, action)\n    }\n\n    return rootState\n  }\n}","export function isObject (obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nexport function isString (str) {\n  return Object.prototype.toString.call(str) === '[object String]'\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (args) => f(g(h(args))).\n */\nexport function compose (...funcs) {\n  return funcs.reduce((acc, func) => (...args) => acc(func(...args)))\n}\n\n/**\n * Shallow compare if two objects have different key or different value for same key(shallowly)\n * @param a Object a\n * @param b Object b\n * @returns {boolean}\n */\nexport function shallowCompare (a, b) {\n  for (let i in a) {\n    if (!(i in b)) {\n      return true\n    }\n  }\n\n  for (let i in b) {\n    if (a[i] !== b[i]) {\n      return true\n    }\n  }\n  return false\n}\n","import {isObject, isString} from './utils'\n\nexport const ActionTypes = {\n  INIT: '@@xuder/INIT'\n}\n\nexport default class Store {\n  constructor (reducer, initialState = {}) {\n    this.reducer = reducer\n    this.state = initialState\n    this.subscribers = []\n    this.dispatch = this._dispatch.bind(this)\n    this.dispatch({type: ActionTypes.INIT})\n  }\n\n  /**\n   * Dispatch the action\n   * @param {Object} action A plain object representing “what changed”.\n   * @returns {Object} we need to return action as convenience.\n   * Thus we can chain the middleware by passing action or something\n   * @private\n   */\n  _dispatch (action) {\n    if (!isObject(action) || !isString(action.type)) {\n      throw new Error('action should be an object with \"type\" filed as string')\n    }\n\n    this.state = this.reducer(this.state, action)\n\n    this\n      .subscribers\n      .forEach(subscriber => subscriber())\n\n    return action\n  }\n\n  subscribe (subscriber) {\n    const me = this\n    me.subscribers = me\n      .subscribers\n      .concat(subscriber)\n\n    // unsubscribe\n    return () => {\n      const index = me.subscribers.indexOf(subscriber)\n      me.subscribers.splice(index, 1)\n    }\n  }\n\n  getState () {\n    return this.state\n  }\n}\n","import Store from './Store'\n\nexport default function createStore (reducer, preloadedState, enhancer) {\n  if (typeof enhancer === 'function') {\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof preloadedState === 'function') {\n    return preloadedState(createStore)(reducer);\n  }\n\n  return new Store(reducer, preloadedState)\n}\n","import {compose} from './utils'\n\nexport default function applyMiddleware (...middlewares) {\n  return (createStore) => (reducer, preloadedState) => {\n    const store = createStore(reducer, preloadedState)\n    let dispatch = store.dispatch\n    const middlewareAPI = {\n      getState: store.getState.bind(store),\n      dispatch: (action) => dispatch(action)\n    }\n\n    // each middleware is like store=> dispatch => action => {...}\n    let middlewareChains = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...middlewareChains)(store.dispatch)\n\n    // The Object.assign() method only copies enumerable and own properties\n    // from a source object to a target object.\n    // because getState is in Store.prototype, Object.assign need a explicit way to do copy\n    return Object.assign({}, store, {dispatch, getState: store.getState})\n  }\n}\n"],"names":[],"mappings":"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"}