{"version":3,"file":"xuder.js","sources":["../src/combineReducers.js","../src/utils.js","../src/Store.js"],"sourcesContent":["export default function combineReducers (reducersMap) {\n  return function (rootState = {}, action) {\n    for (let key in reducersMap) {\n      let subReducer = reducersMap[key]\n      let subState = rootState[key]\n      rootState[key] = subReducer(subState, action)\n    }\n\n    return rootState\n  }\n}","export function isObject (obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nexport function isString (str) {\n  return Object.prototype.toString.call(str) === '[object String]'\n}\n\n/**\n * Shallow compare if two objects have different key or different value for same key(shallowly)\n * @param a Object a\n * @param b Object b\n * @returns {boolean}\n */\nexport function shallowCompare (a, b) {\n  for (let i in a) {\n    if (!(i in b)) {\n      return true\n    }\n  }\n\n  for (let i in b) {\n    if (a[i] !== b[i]) {\n      return true\n    }\n  }\n  return false\n}\n","import {isObject, isString} from './utils'\n\nexport const ActionTypes = {\n  INIT: '@@xuder/INIT'\n}\n\nexport default class Store {\n  constructor (reducer, initalState = {}) {\n    this.reducer = reducer\n    this.state = initalState\n    this.subscribers = []\n    this.dispatch = this._dispatch.bind(this)\n    this.dispatch({type: ActionTypes.INIT})\n  }\n\n  _dispatch (action) {\n    if (!isObject(action) || !isString(action.type)) {\n      throw new Error('action should be an object with \"type\" filed as string')\n    }\n\n    this.state = this.reducer(this.state, action)\n\n    this\n      .subscribers\n      .forEach(subscriber => subscriber())\n  }\n\n  subscribe (subscriber) {\n    const me = this\n    me.subscribers = me\n      .subscribers\n      .concat(subscriber)\n\n    // unsubscribe\n    return () => {\n      const index = me.subscribers.indexOf(subscriber)\n      me.subscribers.splice(index, 1)\n    }\n  }\n\n  getState () {\n    return this.state\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAe,SAAS,eAAe,EAAE,WAAW,EAAE;EACpD,OAAO,UAAU,SAAS,GAAG,EAAE,EAAE,MAAM,EAAE;IACvC,KAAK,IAAI,GAAG,IAAI,WAAW,EAAE;MAC3B,IAAI,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,CAAA;MACjC,IAAI,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;MAC7B,SAAS,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;KAC9C;;IAED,OAAO,SAAS;GACjB;;;ACTI,SAAS,QAAQ,EAAE,GAAG,EAAE;EAC7B,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB;CACjE;;AAED,AAAO,SAAS,QAAQ,EAAE,GAAG,EAAE;EAC7B,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB;CACjE;;;;;;;;AAQD,AAAO,SAAS,cAAc,EAAE,CAAC,EAAE,CAAC,EAAE;EACpC,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;IACf,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE;MACb,OAAO,IAAI;KACZ;GACF;;EAED,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;IACf,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MACjB,OAAO,IAAI;KACZ;GACF;EACD,OAAO,KAAK;CACb;;ACzBM,MAAM,WAAW,GAAG;EACzB,IAAI,EAAE,cAAc;CACrB,CAAA;;AAED,AAAe,MAAM,KAAK,CAAC;EACzB,WAAW,CAAC,CAAC,OAAO,EAAE,WAAW,GAAG,EAAE,EAAE;IACtC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACtB,IAAI,CAAC,KAAK,GAAG,WAAW,CAAA;IACxB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAA;IACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACzC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAAA;GACxC;;EAED,SAAS,CAAC,CAAC,MAAM,EAAE;IACjB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;MAC/C,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC;KAC1E;;IAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;;IAE7C,IAAI;OACD,WAAW;OACX,OAAO,CAAC,UAAU,IAAI,UAAU,EAAE,CAAC,CAAA;GACvC;;EAED,SAAS,CAAC,CAAC,UAAU,EAAE;IACrB,MAAM,EAAE,GAAG,IAAI,CAAA;IACf,EAAE,CAAC,WAAW,GAAG,EAAE;OAChB,WAAW;OACX,MAAM,CAAC,UAAU,CAAC,CAAA;;;IAGrB,OAAO,MAAM;MACX,MAAM,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;MAChD,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;KAChC;GACF;;EAED,QAAQ,CAAC,GAAG;IACV,OAAO,IAAI,CAAC,KAAK;GAClB;CACF,;;;;,;;,;;"}